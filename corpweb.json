{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFormation template for Assignment 2",
  "Parameters": {
    "InstanceType": {
      "Description": "User choose instance type",
      "Type": "String",
      "AllowedValues": ["t2.micro", "t2.small"],
      "Default": "t2.micro"
    },
    "KeyPair": {
      "Description": "KeyPair to be used for SSH",
      "Type": "String"
    },
    "YourIp": {
      "Description": "Personal IP in CIDR notation for use in SG",
      "Type": "String",
      "Default": "0.0.0.0/0"
    }
  },
  "Resources": {
    "EngineeringVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/18",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "EngineeringVpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "EngineeringVpc" },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] }
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "EngineeringVpc" },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] }
      }
    },
    "WebserversSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for web servers",
        "VpcId": { "Ref": "EngineeringVpc" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "YourIp" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "web1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": { "Ref": "InstanceType" },
        "ImageId": "ami-01cc34ab2709337aa",
        "KeyName": { "Ref": "KeyPair" },
        "SubnetId": { "Ref": "PublicSubnet1" },
        "SecurityGroupIds": [{ "Ref": "WebserversSG" }],
        "Tags": [
          { "Key": "Name", "Value": "web1" }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum update -y\n",
                "yum install -y git httpd php\n",
                "service httpd start\n",
                "chkconfig httpd on\n",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
              ]
            ]
          }
        }
      }
    },
    "web2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": { "Ref": "InstanceType" },
        "ImageId": "ami-01cc34ab2709337aa",
        "KeyName": { "Ref": "KeyPair" },
        "SubnetId": { "Ref": "PublicSubnet2" },
        "SecurityGroupIds": [{ "Ref": "WebserversSG" }],
        "Tags": [
          { "Key": "Name", "Value": "web2" }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum update -y\n",
                "yum install -y git httpd php\n",
                "service httpd start\n",
                "chkconfig httpd on\n",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
              ]
            ]
          }
        }
      }
    },
    "EngineeringLB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "EngineeringLB",
        "Subnets": [{ "Ref": "PublicSubnet1" }, { "Ref": "PublicSubnet2" }],
        "SecurityGroups": [{ "Ref": "WebserversSG" }],
        "Scheme": "internet-facing"
      }
    },
    "EngineeringWebservers": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "EngineeringWebservers",
        "Port": 80,
        "Protocol": "HTTP",
        "VpcId": { "Ref": "EngineeringVpc" },
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2
      }
    },
    "EngineeringLBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "EngineeringWebservers" }
          }
        ],
        "LoadBalancerArn": { "Ref": "EngineeringLB" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "EngineeringLBHealthCheck": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "Targets": [
          {
            "Id": { "Ref": "web1" }
          },
          {
            "Id": { "Ref": "web2" }
          }
        ],
        "UnhealthyThresholdCount": 2,
        "VpcId": { "Ref": "EngineeringVpc" }
      }
    }
  },
  "Outputs": {
    "WebUrl": {
      "Description": "Name of Load balancer DNS",
      "Value": { "Fn::GetAtt": ["EngineeringLB", "DNSName"] }
    }
  }
}
